#!/bin/bash

# An extensive script for displaying the ranking of baby names by inputted by year and gender as the category and name for searching.
#
# Usage: 
#     bn <year> <assigned gender: f|F|m|M|b|B>
#     Example: ./bn 1969 M
# 
# The script reads the baby name data from available file and returns the rank of names to stdout given a specific year and gender. 
# It also handles errors for invalid inputs and sends it to stderr.
# The script searches names by male (m,M), female (f,F) or both (b,B) genders.
#
# Format:
#     Each baby name file is named as yob<year>.txt and contains entries in 
#     the format: name,gender,count. 
#     For example: Dhruv,M,2005
#
# Author:
# Dhruv Chokshi, McMaster University, October 2024


#Usage function that displays the expected command-line arguments upon error
usage(){
    echo "bn <year> <assigned gender: f|F|m|M|b|B>" >&2
}

#Help function that provides usage instructions
help(){
    echo "bn - Baby Names Utility"
    echo "Version 1.0.0"
    echo "Search for rankings of baby names by year and gender."
    echo "Usage:        bn <year> <assigned gender: f|F|m|M|b|B>"
    echo "--help,       display this help and exits"
    echo "Options:"
    echo "year          A four-digit year"
    echo "gender        'f/F' or 'm/M' for female or male, 'b/B' for both"
    echo "Examples: "
    echo "bn 1969 M"
    echo "Bob JEFF      Outputs the ranking for Bob in gender Male and JEFF in gender Male."
    echo "bn 1969 F"
    echo "Bob JEFF      Outputs the ranking for Bob in gender Female and JEFF in gender Female - if name does not exist, it outputs, doesn't exist."
}

if [[ $1 = "--help" ]] #If --help flag is provided, function is executed
then
    help
fi

birthYear=$1
birthGender=$2
dataFile="us_baby_names/yob${birthYear}.txt" #Stores path name of file

if [[ $# -gt 2 || $# -lt 2 ]] #Check if the correct number of arguments is provided
then
    usage
    exit 1;
fi

if [[ $birthYear =~ ^[0-9]{4}$ ]] #Checks if birth year is valid (4 digits)
then
    true
else
    echo "Badly formatted year: $birthYear" >&2
    usage
    exit 2;
fi

if [[ $birthGender =~ ^[FfMmBb]$ ]] #Checks if birth gender is valid (F or f or M or m or B or b)
then
    true
else
    echo "Badly formatted assigned gender: $birthGender" >&2
    usage
    exit 2;
fi


if [[ -f $dataFile ]] #Check if the data file exists
then
    true
else
    echo "No data for $birthYear" >&2
    exit 4;
fi

# Define the rank function to search and display the rank of a given name
rank(){
    local name=$1

    #Search for names in specific categories
    local searchName=$(cat $dataFile | grep -P -i "^[A-Z]+,${birthGender},[0-9]+" | grep -n -P -i -w "$name,${birthGender},[0-9]+" | grep -P -o "^[0-9]+")
    local totalNames=$(cat $dataFile | grep -P -i "^[A-Z]+,${birthGender},[0-9]+" | wc -l)

    #Search for name with specified categories (only used when both gender argument is called)
    local searchNameMale=$(cat "$dataFile" | grep -P -i "^[A-Z]+,M,[0-9]+" | grep -n -P -i -w "$name,M,[0-9]+" | grep -P -o "^[0-9]+")
    local totalMale=$(cat "$dataFile" | grep -P -i "^[A-Z]+,M,[0-9]+" | wc -l)
    local searchNameFemale=$(cat "$dataFile" | grep -P -i "^[A-Z]+,F,[0-9]+" | grep -n -P -i -w "$name,F,[0-9]+" | grep -P -o "^[0-9]+")
    local totalFemale=$(cat "$dataFile" | grep -P -i "^[A-Z]+,F,[0-9]+" | wc -l)

    #Executes only if the name argument is provided correctly (Starting with letters and ending with letters)
    if [[ $name =~ ^[A-Za-z]+$ ]]
    then
        if [[ $birthGender = "M" || $birthGender = "m" ]] #Checks for male names
        then
            if [[ $searchName = "" ]]
            then
                echo "$birthYear: $name not found among the male names."
            else
                echo "$birthYear: $name ranked $searchName out of $totalNames male names."
            fi
        elif [[ $birthGender = "F" || $birthGender = "f" ]] #Checks for female names
        then
            if [[ $searchName = "" ]]
            then
                echo "$birthYear: $name not found among the female names."
            else
                echo "$birthYear: $name ranked $searchName out of $totalNames female names."
            fi
        else #Checks for both names
            if [[ $searchNameMale = "" && $searchNameFemale = "" ]]
            then
                echo "$birthYear: $name not found among the male names."
                echo "$birthYear: $name not found among the female names."
            elif [[ $searchNameMale = "" ]]
            then
                echo "$birthYear: $name not found among the male names."
                echo "$birthYear: $name ranked $searchNameFemale out of $totalFemale female names."
            elif [[ $searchNameFemale = "" ]]
            then
                echo "$birthYear: $name ranked $searchNameMale out of $totalMale male names."
                echo "$birthYear: $name not found among the female names."
            else
                echo "$birthYear: $name ranked $searchNameMale out of $totalMale male names."
                echo "$birthYear: $name ranked $searchNameFemale out of $totalFemale female names."
            fi
        fi
    else
        echo "Badly formatted name: $name" >&2
        exit 3;
    fi
}

#Reads entire input line from the user and passes each name to the rank function
while read line
do
    for allNames in $line
    do
        rank $allNames
    done
done